// Copyright 2015 Amazon.com, Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.
//
// Source: dependencies.go in package docker
// Automatically generated by MockGen. DO NOT EDIT!

package docker

import (
	gomock "code.google.com/p/gomock/gomock"
	go_dockerclient "github.com/fsouza/go-dockerclient"
)

// Mock of dockerclient interface
type Mockdockerclient struct {
	ctrl     *gomock.Controller
	recorder *_MockdockerclientRecorder
}

// Recorder for Mockdockerclient (not exported)
type _MockdockerclientRecorder struct {
	mock *Mockdockerclient
}

func NewMockdockerclient(ctrl *gomock.Controller) *Mockdockerclient {
	mock := &Mockdockerclient{ctrl: ctrl}
	mock.recorder = &_MockdockerclientRecorder{mock}
	return mock
}

func (_m *Mockdockerclient) EXPECT() *_MockdockerclientRecorder {
	return _m.recorder
}

func (_m *Mockdockerclient) ListImages(opts go_dockerclient.ListImagesOptions) ([]go_dockerclient.APIImages, error) {
	ret := _m.ctrl.Call(_m, "ListImages", opts)
	ret0, _ := ret[0].([]go_dockerclient.APIImages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockdockerclientRecorder) ListImages(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListImages", arg0)
}

func (_m *Mockdockerclient) LoadImage(opts go_dockerclient.LoadImageOptions) error {
	ret := _m.ctrl.Call(_m, "LoadImage", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockdockerclientRecorder) LoadImage(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadImage", arg0)
}

func (_m *Mockdockerclient) ListContainers(opts go_dockerclient.ListContainersOptions) ([]go_dockerclient.APIContainers, error) {
	ret := _m.ctrl.Call(_m, "ListContainers", opts)
	ret0, _ := ret[0].([]go_dockerclient.APIContainers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockdockerclientRecorder) ListContainers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ListContainers", arg0)
}

func (_m *Mockdockerclient) RemoveContainer(opts go_dockerclient.RemoveContainerOptions) error {
	ret := _m.ctrl.Call(_m, "RemoveContainer", opts)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockdockerclientRecorder) RemoveContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "RemoveContainer", arg0)
}

func (_m *Mockdockerclient) CreateContainer(opts go_dockerclient.CreateContainerOptions) (*go_dockerclient.Container, error) {
	ret := _m.ctrl.Call(_m, "CreateContainer", opts)
	ret0, _ := ret[0].(*go_dockerclient.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockdockerclientRecorder) CreateContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CreateContainer", arg0)
}

func (_m *Mockdockerclient) StartContainer(id string, hostConfig *go_dockerclient.HostConfig) error {
	ret := _m.ctrl.Call(_m, "StartContainer", id, hostConfig)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockdockerclientRecorder) StartContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StartContainer", arg0, arg1)
}

func (_m *Mockdockerclient) WaitContainer(id string) (int, error) {
	ret := _m.ctrl.Call(_m, "WaitContainer", id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockdockerclientRecorder) WaitContainer(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WaitContainer", arg0)
}

func (_m *Mockdockerclient) StopContainer(id string, timeout uint) error {
	ret := _m.ctrl.Call(_m, "StopContainer", id, timeout)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockdockerclientRecorder) StopContainer(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "StopContainer", arg0, arg1)
}

// Mock of fileSystem interface
type MockfileSystem struct {
	ctrl     *gomock.Controller
	recorder *_MockfileSystemRecorder
}

// Recorder for MockfileSystem (not exported)
type _MockfileSystemRecorder struct {
	mock *MockfileSystem
}

func NewMockfileSystem(ctrl *gomock.Controller) *MockfileSystem {
	mock := &MockfileSystem{ctrl: ctrl}
	mock.recorder = &_MockfileSystemRecorder{mock}
	return mock
}

func (_m *MockfileSystem) EXPECT() *_MockfileSystemRecorder {
	return _m.recorder
}

func (_m *MockfileSystem) ReadFile(filename string) ([]byte, error) {
	ret := _m.ctrl.Call(_m, "ReadFile", filename)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockfileSystemRecorder) ReadFile(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ReadFile", arg0)
}
